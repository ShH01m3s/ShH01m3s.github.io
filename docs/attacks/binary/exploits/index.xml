<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>‚öôÔ∏è Exploits on Analyst</title>
    <link>https://bakerst221b.com/docs/attacks/binary/exploits/</link>
    <description>Recent content in ‚öôÔ∏è Exploits on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate><atom:link href="https://bakerst221b.com/docs/attacks/binary/exploits/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Vulnerabilities And Exploits</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/bin/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/bin/</guid>
      <description>&lt;p&gt;&lt;em&gt;In this article I will collect common binary vulnerability (expept for the bufferoverflow which has its own dedicated article) &amp;hellip; .&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploit Development</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/dev/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/dev/</guid>
      <description>Process Steps Overview Fuzz and fins unusual behaviour Detect any possibility to overwrite crucial parts: EIP SEH Acces violations/invalid memory addresses etc Hijack Execution Eliminate bad characters Write PoC, spawning a reverse or bind shell, RAT or move to other systems.</description>
    </item>
    
    <item>
      <title>Return- and jump-oriented Programming</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/rop-jop/</link>
      <pubDate>Sun, 14 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/rop-jop/</guid>
      <description>&lt;p&gt;&lt;em&gt;Return-oriented programming is an exploit technique that can bypass several binary defence mechanisms.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>üëâüèº Use-After-Free</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/use-after-free/</link>
      <pubDate>Thu, 11 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/use-after-free/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is about use-after-free vulnerability, its mechanics and how it can be used for evil things. Several things could be done by using this vulnerability, for example, reading sensitive info or arbitrary code execution. The exploitation often requires the presence of some other vulnerability as well, for example, buffer overflow (not always).&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Meltdown &amp; Spectre</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/meltdown-spectre/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/meltdown-spectre/</guid>
      <description>&lt;p&gt;&lt;em&gt;Several years ago, the internet was flooded with news about two famous vulnerabilities: Meltdown and Spectre. It took me some time to understand how both of them work, but here are the results of my attempt. To understand the mechanics of these two vulnerabilities, one needs to understand the basics that I&amp;rsquo;ve tried to explain in the article &lt;a href=&#34;https://bakerst221b.com/docs/reverse/basics/cpu&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oracle Access Manager Pre-Auth RCE</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/cisco-rce/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/cisco-rce/</guid>
      <description>&lt;p&gt;&lt;em&gt;Vulnerability&amp;rsquo;s code -  CVE-2021‚Äì35587.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>üìö Intel SA 00086</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/intel-sa-00086/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/intel-sa-00086/</guid>
      <description>Intel ME (former south bridge) - mediator between the PC and all other devices (USBs, for example).</description>
    </item>
    
    <item>
      <title>Alloc8</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/alloc8/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/alloc8/</guid>
      <description>So, there are some prerequisites that one needs to have in order to get this exploit.</description>
    </item>
    
    <item>
      <title>Checkm8</title>
      <link>https://bakerst221b.com/docs/attacks/binary/exploits/checkm8/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/binary/exploits/checkm8/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
