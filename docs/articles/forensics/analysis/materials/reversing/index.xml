<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reverse Engineering on Analyst</title>
    <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/</link>
    <description>Recent content in Reverse Engineering on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate><atom:link href="https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Malware Analysis Tips</title>
      <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/malware-analysis-tips/</link>
      <pubDate>Sun, 07 Feb 2021 12:13:56 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/malware-analysis-tips/</guid>
      <description>In this article I&amp;rsquo;m collecting all the main tips for malware analysis. Some indicators of compromise, some common clues and etc.</description>
    </item>
    
    <item>
      <title>Ios Reverse</title>
      <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/ios-reverse/</link>
      <pubDate>Fri, 09 Oct 2020 10:31:32 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/ios-reverse/</guid>
      <description>During forensic analysis it&amp;rsquo;s not too rare to run into some suspicious application. In this article I&amp;rsquo;m going to learn to reverse engineer iOS applications.</description>
    </item>
    
    <item>
      <title>Packed Executables</title>
      <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/packing/</link>
      <pubDate>Fri, 09 Oct 2020 10:31:32 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/packing/</guid>
      <description>There are several indicators that the executable is packed. Here they are (this list will be growing as I encounter new indicators):</description>
    </item>
    
    <item>
      <title>Dynamic Analysis</title>
      <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/dynamic/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/dynamic/</guid>
      <description>This is more about cracking.
Cracking lab presents&amp;hellip;. . Staring: ðŸŒŸ
Tools ðŸ§°: OllyDbg as a debugger, Import Reconstructors as an &amp;hellip; wait for it &amp;hellip;.</description>
    </item>
    
    <item>
      <title>Static Analysis</title>
      <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/static/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/static/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crackme Algorithm</title>
      <link>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/crack-me-algo/</link>
      <pubDate>Thu, 24 Sep 2020 17:46:43 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/forensics/analysis/materials/reversing/crack-me-algo/</guid>
      <description>Look at the strings fs strings and f in radare2 or rabin -zz Find xrefs for the strings of interest axt @ str.</description>
    </item>
    
  </channel>
</rss>
