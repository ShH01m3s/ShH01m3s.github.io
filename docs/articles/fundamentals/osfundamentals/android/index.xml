<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android OS Fundamentals on Analyst</title>
    <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/</link>
    <description>Recent content in Android OS Fundamentals on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Aug 2020 09:49:24 +0300</lastBuildDate><atom:link href="https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Attacking Android</title>
      <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-attacks/</link>
      <pubDate>Sun, 13 Sep 2020 20:29:15 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-attacks/</guid>
      <description>Attacking device For this attack there are several types of attacker: • MiM, i.e. a sniffer.</description>
    </item>
    
    <item>
      <title>Android Applications Intro</title>
      <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-applications-intro/</link>
      <pubDate>Sun, 13 Sep 2020 20:28:20 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-applications-intro/</guid>
      <description>Android Overview
I’m not going to describe in all the details the basics of this architecture for it’s described pretty good here: Mobile Security Guide link.</description>
    </item>
    
    <item>
      <title>Android Booting Process</title>
      <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-booting-process/</link>
      <pubDate>Sun, 13 Sep 2020 20:28:20 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-booting-process/</guid>
      <description>This article describes Android booting process.
Booting Process Step 1: Power On and System Startup. When we press the power button, the Boot ROM code starts executing from a pre-defined location which is hardwired in ROM.</description>
    </item>
    
    <item>
      <title>Activities</title>
      <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-activities/</link>
      <pubDate>Thu, 10 Sep 2020 17:49:48 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-activities/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-debug/</link>
      <pubDate>Wed, 09 Sep 2020 19:28:46 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-debug/</guid>
      <description>In this article I&amp;rsquo;m assembling all possible to anti-debugging techniques and how they can be curcumvented.</description>
    </item>
    
    <item>
      <title>IPC Attacks</title>
      <link>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-ipc-attacks/</link>
      <pubDate>Wed, 09 Sep 2020 19:28:46 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/articles/fundamentals/osfundamentals/android/android-ipc-attacks/</guid>
      <description>Fragment Injection  To read: https://securityintelligence.com/new-vulnerability-android-framework-fragment-injection/
 Preamble: Reflection Fragments require Reflection API. What&amp;rsquo;s that? Compare two ways of instanciating a class:</description>
    </item>
    
  </channel>
</rss>
