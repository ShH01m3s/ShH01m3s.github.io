<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics 📚 on Analyst</title>
    <link>https://bakerst221b.com/docs/reverse/basics/</link>
    <description>Recent content in Basics 📚 on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Aug 2020 09:49:24 +0300</lastBuildDate><atom:link href="https://bakerst221b.com/docs/reverse/basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Data Types</title>
      <link>https://bakerst221b.com/docs/reverse/basics/data-types/</link>
      <pubDate>Sun, 18 Oct 2020 22:35:40 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/data-types/</guid>
      <description>VarInt Is used to safe memory. For example, number 5 only occupies 1 byte, but 1032 will need two bytes to live.</description>
    </item>
    
    <item>
      <title>Memory Addressing</title>
      <link>https://bakerst221b.com/docs/reverse/basics/memory-addressing/</link>
      <pubDate>Sun, 18 Oct 2020 22:35:40 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/memory-addressing/</guid>
      <description>I&amp;rsquo;ve had a lot of time to dive into certain pecularities of how programs are outlined both in RAM and on disk when working as a malware analyst.</description>
    </item>
    
    <item>
      <title>Compilation and Linking 🔗</title>
      <link>https://bakerst221b.com/docs/reverse/basics/compilation-and-linking/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:41 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/compilation-and-linking/</guid>
      <description>In this article I am trying to reasearch compilation and linking process.
Terms .cpp - is a human-readable file written in any programming language.</description>
    </item>
    
    <item>
      <title>Exceptions</title>
      <link>https://bakerst221b.com/docs/reverse/basics/exceptions/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:41 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/exceptions/</guid>
      <description>⚠️ Note that x64 does not use this mechanism for exception handling.
 Consider the following code:</description>
    </item>
    
    <item>
      <title>Interrupts</title>
      <link>https://bakerst221b.com/docs/reverse/basics/interrupts/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:41 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/interrupts/</guid>
      <description>Character Special Files One of the examples of a special files are:
 /dev/stdin /dev/stdout /dev/random (PRNG which may delay returning a value to acquire additional entropy.</description>
    </item>
    
    <item>
      <title>Packers and Unpacking</title>
      <link>https://bakerst221b.com/docs/reverse/basics/unpacking/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:41 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/unpacking/</guid>
      <description>References [1] Manual unpacking (rus 🇷🇺)
[2] Unpacking FSG 2.0 (rus 🇷🇺)
[3] Introduction to unpacking (rus 🇷🇺)</description>
    </item>
    
    <item>
      <title>Positive and Negative Numbers</title>
      <link>https://bakerst221b.com/docs/reverse/basics/positive-and-negative-numbers/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:25 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/positive-and-negative-numbers/</guid>
      <description>Intro One&amp;rsquo;s complement Two complement </description>
    </item>
    
    <item>
      <title>Processes, threads and mutants zombie 🧟‍♂️</title>
      <link>https://bakerst221b.com/docs/reverse/basics/process-thread-mutant/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:25 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/process-thread-mutant/</guid>
      <description>In this article I am describing the difference between a process, thread and mutex.
Process When and exe file or other executable file is run, some memory in RAM is allocated and the program&amp;rsquo;s code and data is read from the hard drive and written into RAM.</description>
    </item>
    
    <item>
      <title>iOS Reverse Engineering</title>
      <link>https://bakerst221b.com/docs/reverse/basics/ios-reversing/</link>
      <pubDate>Fri, 09 Oct 2020 10:31:32 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/ios-reversing/</guid>
      <description>During forensic analysis it&amp;rsquo;s not too rare to run into some suspicious application. In this article I&amp;rsquo;m going to learn to reverse engineer iOS applications.</description>
    </item>
    
    <item>
      <title>Reference vs Value</title>
      <link>https://bakerst221b.com/docs/reverse/basics/reference-vs-value/</link>
      <pubDate>Mon, 05 Oct 2020 18:48:46 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/reference-vs-value/</guid>
      <description>Lorem markdownum aequalis strigis. Saetigeri iubeas, vultu huic alvum nondum de obside ut laniavit arbor palmis, cum quin.</description>
    </item>
    
    <item>
      <title>Mutable vs Immutable</title>
      <link>https://bakerst221b.com/docs/reverse/basics/mutable-vs-immutable/</link>
      <pubDate>Mon, 05 Oct 2020 18:48:35 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/mutable-vs-immutable/</guid>
      <description>&amp;gt;&amp;gt;&amp;gt; import ctypes &amp;gt;&amp;gt;&amp;gt; a = 5 &amp;gt;&amp;gt;&amp;gt; address = id(a) &amp;gt;&amp;gt;&amp;gt; address 4307917216 &amp;gt;&amp;gt;&amp;gt; ctypes.</description>
    </item>
    
    <item>
      <title>C Program Memory Layout</title>
      <link>https://bakerst221b.com/docs/reverse/basics/c-prog-memory-layout/</link>
      <pubDate>Sun, 27 Sep 2020 12:16:50 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/c-prog-memory-layout/</guid>
      <description>Intro At the very beginning of my career I found it hard to grasp the notion of memory layout and stack.</description>
    </item>
    
    <item>
      <title>Cracking 🔨</title>
      <link>https://bakerst221b.com/docs/reverse/basics/crack-me-algo/</link>
      <pubDate>Thu, 24 Sep 2020 17:46:43 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/crack-me-algo/</guid>
      <description>&lt;p&gt;&lt;em&gt;Any cracking career is supposed to start with solving simple crackme&amp;rsquo;s. I&amp;rsquo;ve not been doing it all the time, but I&amp;rsquo;ve solved several of them from the simplest to a very hard one which required some math knowledge 😬. This allowed me to craft some sort of algorithm I would like to share.&amp;quot;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>From Src to Binary</title>
      <link>https://bakerst221b.com/docs/reverse/basics/from-src-to-binary/</link>
      <pubDate>Thu, 24 Sep 2020 17:46:43 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/from-src-to-binary/</guid>
      <description>To read
https://www.airs.com/blog/archives/38</description>
    </item>
    
  </channel>
</rss>
