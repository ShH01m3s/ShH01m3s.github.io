<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exploits on Analyst</title>
    <link>https://bakerst221b.com/docs/reverse/exploits/</link>
    <description>Recent content in Exploits on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Nov 2018 15:14:39 +1000</lastBuildDate><atom:link href="https://bakerst221b.com/docs/reverse/exploits/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Binary Vulnerabilities And Exploits</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/bin/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/bin/</guid>
      <description>&lt;p&gt;&lt;em&gt;In this article I will collect common binary vulnerability (expept for the bufferoverflow which has its own dedicated article) &amp;hellip; .&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Meltdown</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/meltdown/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/meltdown/</guid>
      <description>&lt;p&gt;&lt;em&gt;This article is the product of my attempt to understand Meltdown vulnerability.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Specter</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/specter/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/specter/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is about &amp;hellip; .&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ðŸ“š Intel SA 00086</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/intel-sa-00086/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/intel-sa-00086/</guid>
      <description>Intel ME (former south bridge) - mediator between the PC and all other devices (USBs, for example).</description>
    </item>
    
    <item>
      <title>Alloc8</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/alloc8/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/alloc8/</guid>
      <description>So, there are some prerequisites that one needs to have in order to get this exploit.</description>
    </item>
    
    <item>
      <title>Buffer Overflow</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/bufferoverflow/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/bufferoverflow/</guid>
      <description>The idea of a buffer overflow attack is quite simple, though the implementation might be difficult to digest at first.</description>
    </item>
    
    <item>
      <title>Checkm8</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/checkm8/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/checkm8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exploit Development</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/dev/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/dev/</guid>
      <description>Process Steps Overview Fuzz and fins unusual behaviour Detect any possibility to overwrite crucial parts: EIP SEH Acces violations/invalid memory addresses etc Hijack Execution Eliminate bad characters Write PoC, spawning a reverse or bind shell, RAT or move to other systems.</description>
    </item>
    
  </channel>
</rss>
