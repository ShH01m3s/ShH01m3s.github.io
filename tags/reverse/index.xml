<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reverse on Analyst</title>
    <link>https://bakerst221b.com/tags/reverse/</link>
    <description>Recent content in reverse on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jul 2022 15:14:39 +1000</lastBuildDate><atom:link href="https://bakerst221b.com/tags/reverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Apple Mach-O</title>
      <link>https://bakerst221b.com/docs/reverse/executables/apple-mach-o-file/</link>
      <pubDate>Mon, 28 Sep 2020 13:21:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/executables/apple-mach-o-file/</guid>
      <description>Binary info otool Using otool we can get general info about the Mach-O file:
otool -h [app_name] &amp;gt; Mach header magic cputype cpusubtype caps filetype ncmds sizeofcmds flags 0xfeedfacf 16777228 0 0x00 2 115 11384 0x00218085 Quick refernce on the meaning:</description>
    </item>
    
    <item>
      <title>Binary Vulnerabilities And Exploits</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/bin/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/bin/</guid>
      <description>&lt;p&gt;&lt;em&gt;In this article I will collect common binary vulnerability (expept for the bufferoverflow which has its own dedicated article) &amp;hellip; .&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Exploit Development Env</title>
      <link>https://bakerst221b.com/docs/toolkit/exploit-env/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/toolkit/exploit-env/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is about &amp;hellip; .&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>TLScallback</title>
      <link>https://bakerst221b.com/docs/reverse/malware-analysis/workbooks/tls/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/malware-analysis/workbooks/tls/</guid>
      <description>&lt;p&gt;&lt;em&gt;This is some malware that had a TLScallback in its main and several entry0-2 functions + 1main.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>The Lord of the Apple: The Return of the iPhone</title>
      <link>https://bakerst221b.com/docs/blog/2021/08/lord-of-the-apple/</link>
      <pubDate>Sun, 25 Apr 2021 17:18:04 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2021/08/lord-of-the-apple/</guid>
      <description>üìÜ 22/08/2021 , Sunday, ‚òÅÔ∏è
üï∞ 11:21 AM.
It was a cloudy Sunday morning. I was sleeping peacefully till 8:45 AM when my daughter started crawling all over me and my husband asking wether I am awake already&amp;hellip; .</description>
    </item>
    
    <item>
      <title>To Carry Out MockInv&#39;estigation. Part 2</title>
      <link>https://bakerst221b.com/docs/blog/2021/06/magnet/</link>
      <pubDate>Sun, 25 Apr 2021 17:18:04 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2021/06/magnet/</guid>
      <description>üìÜ 16/06/2021 , Wednesday
üï∞ 09:21 PM.
I had a 7-day license of Magnet AXIOM and I&amp;rsquo;ve decided to try this tool and compare it with others that I had.</description>
    </item>
    
    <item>
      <title>How I Got Started With ARM</title>
      <link>https://bakerst221b.com/docs/blog/2021/03/how-i-got-started-with-arm/</link>
      <pubDate>Sun, 07 Mar 2021 11:42:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2021/03/how-i-got-started-with-arm/</guid>
      <description>üìÜ Friday, 12th of March, 202
‚è∞ 09:00
‚òÄÔ∏è It was a very deceptively sunny morning, children laughing and squeaking merrily.</description>
    </item>
    
    <item>
      <title>Compilation and Linking üîó</title>
      <link>https://bakerst221b.com/docs/reverse/basics/compilation-and-linking/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:41 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/compilation-and-linking/</guid>
      <description>In this article I am trying to reasearch compilation and linking process.
Terms .cpp - is a human-readable file written in any programming language.</description>
    </item>
    
    <item>
      <title>Positive and Negative Numbers</title>
      <link>https://bakerst221b.com/docs/reverse/basics/positive-and-negative-numbers/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:25 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/positive-and-negative-numbers/</guid>
      <description>Intro One&amp;rsquo;s complement Two complement </description>
    </item>
    
    <item>
      <title>iOS Reverse Engineering</title>
      <link>https://bakerst221b.com/docs/reverse/basics/ios-reversing/</link>
      <pubDate>Fri, 09 Oct 2020 10:31:32 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/ios-reversing/</guid>
      <description>During forensic analysis it&amp;rsquo;s not too rare to run into some suspicious application. In this article I&amp;rsquo;m going to learn to reverse engineer iOS applications.</description>
    </item>
    
    <item>
      <title>Reference vs Value</title>
      <link>https://bakerst221b.com/docs/reverse/basics/reference-vs-value/</link>
      <pubDate>Mon, 05 Oct 2020 18:48:46 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/reference-vs-value/</guid>
      <description>Lorem markdownum aequalis strigis. Saetigeri iubeas, vultu huic alvum nondum de obside ut laniavit arbor palmis, cum quin.</description>
    </item>
    
    <item>
      <title>Mutable vs Immutable</title>
      <link>https://bakerst221b.com/docs/reverse/basics/mutable-vs-immutable/</link>
      <pubDate>Mon, 05 Oct 2020 18:48:35 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/mutable-vs-immutable/</guid>
      <description>&amp;gt;&amp;gt;&amp;gt; import ctypes &amp;gt;&amp;gt;&amp;gt; a = 5 &amp;gt;&amp;gt;&amp;gt; address = id(a) &amp;gt;&amp;gt;&amp;gt; address 4307917216 &amp;gt;&amp;gt;&amp;gt; ctypes.</description>
    </item>
    
    <item>
      <title>Alloc8</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/alloc8/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/alloc8/</guid>
      <description>So, there are some prerequisites that one needs to have in order to get this exploit.</description>
    </item>
    
    <item>
      <title>Buffer Overflow</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/bufferoverflow/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/bufferoverflow/</guid>
      <description>The idea of a buffer overflow attack is quite simple, though the implementation might be difficult to digest at first.</description>
    </item>
    
    <item>
      <title>Calling ü§ô Conventions in x86</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-calling-conventions/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-calling-conventions/</guid>
      <description>In this article I&amp;rsquo;m giving an overview of different calling conventions with examples.
Intro Consider the following code snippet:</description>
    </item>
    
    <item>
      <title>Checkm8</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/checkm8/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/checkm8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Exploit Development</title>
      <link>https://bakerst221b.com/docs/reverse/exploits/dev/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/exploits/dev/</guid>
      <description>Process Steps Overview  Fuzz and fins unusual behaviour Detect any possibility to overwrite crucial parts:  EIP SEH Acces violations/invalid memory addresses etc   Hijack Execution Eliminate bad characters Write PoC, spawning a reverse or bind shell, RAT or move to other systems.</description>
    </item>
    
    <item>
      <title>Flags</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-flags/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-flags/</guid>
      <description>CF Its full name is carry flag. Its main purpose is to tell that the resulting number after some operations is too much to bear for the registry size.</description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-operations/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-operations/</guid>
      <description>In this article I&amp;rsquo;m describing all assembly operations that I&amp;rsquo;ve encountered myseld and also wasn&amp;rsquo;t lazy anough to put down an explanation about here.</description>
    </item>
    
    <item>
      <title>Registers</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-registers/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-registers/</guid>
      <description>EAX EIP EBP RSI/ESI Source Index.
RSI - 64 bit, ESI - 32.
RDI/EDI Destination Index.</description>
    </item>
    
    <item>
      <title>C Program Memory Layout</title>
      <link>https://bakerst221b.com/docs/reverse/basics/c-prog-memory-layout/</link>
      <pubDate>Sun, 27 Sep 2020 12:16:50 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/c-prog-memory-layout/</guid>
      <description>Intro At the very beginning of my career I found it hard to grasp the notion of memory layout and stack.</description>
    </item>
    
    <item>
      <title>From Src to Binary</title>
      <link>https://bakerst221b.com/docs/reverse/basics/from-src-to-binary/</link>
      <pubDate>Thu, 24 Sep 2020 17:46:43 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/from-src-to-binary/</guid>
      <description>To read
https://www.airs.com/blog/archives/38</description>
    </item>
    
    <item>
      <title>Assembly Cheatsheet</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-cheatsheet/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:54 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-cheatsheet/</guid>
      <description>Lorem markdownum aequalis strigis. Saetigeri iubeas, vultu huic alvum nondum de obside ut laniavit arbor palmis, cum quin.</description>
    </item>
    
    <item>
      <title>ARM Assembly</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-arm/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:23 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-arm/</guid>
      <description>In this article I&amp;rsquo;m giving a quick dive-in into assembly. It&amp;rsquo;s very simple and very difficult at the same time.</description>
    </item>
    
    <item>
      <title>Assembly Intro</title>
      <link>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-intro/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:23 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/basics/assebly/assembly-intro/</guid>
      <description>In this article I&amp;rsquo;m giving a quick dive-in into assembly. It&amp;rsquo;s very simple and very difficult at the same time.</description>
    </item>
    
    <item>
      <title>How I Met Radare2</title>
      <link>https://bakerst221b.com/docs/blog/2020/09/how-i-met-radare2/</link>
      <pubDate>Thu, 24 Sep 2020 10:40:07 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2020/09/how-i-met-radare2/</guid>
      <description>üìÜ 24/09/2020, Wednesday
üï∞ 7:00 What a nice morning! And it&amp;rsquo;s so great to be woken up by a high-pitched cry in the ear&amp;hellip; Well, after giving my daughter her breakfast and doing all the neccessary hygine procedures for us both, I left her by my side on the development carpet, so that I could develop myself&amp;hellip;</description>
    </item>
    
    <item>
      <title>üí± Symbolic and Concrete Execution</title>
      <link>https://bakerst221b.com/docs/reverse/binary-analysis/</link>
      <pubDate>Wed, 09 Sep 2020 19:28:46 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reverse/binary-analysis/</guid>
      <description>References  Expand&amp;hellip; [1] Mobile Sec Guide
[2] Symbolic execution on iOS with R2Frida &amp;amp; ESILSolve</description>
    </item>
    
    <item>
      <title>How I Met Predator</title>
      <link>https://bakerst221b.com/docs/blog/2018/07/analytic-protiv-khishnika/</link>
      <pubDate>Wed, 07 Nov 2018 14:39:39 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2018/07/analytic-protiv-khishnika/</guid>
      <description>Wednesday
*–ù–∏—á–µ–≥–æ —Ç–∞–∫, —Ç–µ–ø–ª–æ.*
–ì–¥–µ-—Ç–æ –≤ —Ç—ë–º–Ω–æ–º-—Ç—ë–º–Ω–æ–º –ª–µ—Å—É, —Å—Ä–µ–¥–∏ –≤—ã—Å–æ–∫–∏—Ö —Å—Ç–∞—Ä—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤, –ø—Ä–∏—Ç–∞–∏–≤—à–∏—Å—å –≤ –∫—É—Å—Ç–∞—Ö –≤—ã–∂–∏–¥–∞—é—Ç —Å–≤–æ—é –∂–µ—Ä—Ç–≤—É —Ö–∏—â–Ω–∏–∫–∏.</description>
    </item>
    
    <item>
      <title>Undesirable Mail</title>
      <link>https://bakerst221b.com/docs/blog/2018/07/undesirable-mail/</link>
      <pubDate>Thu, 19 Jul 2018 14:19:03 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2018/07/undesirable-mail/</guid>
      <description>Thursday, Warm and cloudy.
&amp;ldquo;Open me! I am a payment order! I am important, I swear!</description>
    </item>
    
  </channel>
</rss>
