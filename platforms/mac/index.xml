<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mac on Analyst</title>
    <link>https://bakerst221b.com/platforms/mac/</link>
    <description>Recent content in mac on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Jul 2022 15:14:39 +1000</lastBuildDate><atom:link href="https://bakerst221b.com/platforms/mac/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CyberCorp2</title>
      <link>https://bakerst221b.com/docs/todo/cases/ctf-walkthrough/cybercorp2/</link>
      <pubDate>Wed, 12 Jan 2022 11:42:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/todo/cases/ctf-walkthrough/cybercorp2/</guid>
      <description>‚õîÔ∏è Spoiler alert!
Case Details This is not an investigation like the previous one. This is threat hunting.</description>
    </item>
    
    <item>
      <title>CyberCorp1</title>
      <link>https://bakerst221b.com/docs/todo/cases/ctf-walkthrough/cybercorp1/</link>
      <pubDate>Sat, 08 Jan 2022 11:42:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/todo/cases/ctf-walkthrough/cybercorp1/</guid>
      <description>‚õîÔ∏è Spoiler alert!
Case Details Artefacts in posession: memory dump, OS event logs, registry files, Prefetch files, $MFT file, ShimCache, AmCache, network traffic dumps.</description>
    </item>
    
    <item>
      <title>Apple Partition Map</title>
      <link>https://bakerst221b.com/docs/artefacts/fs/partiation-schemas/apm/</link>
      <pubDate>Tue, 06 Oct 2020 09:39:12 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/fs/partiation-schemas/apm/</guid>
      <description>APFS is not very much described from the forensic perspective. I wonder how much APM is described.</description>
    </item>
    
    <item>
      <title>üßº Media Sterilisation</title>
      <link>https://bakerst221b.com/docs/ttp/sterilisation/</link>
      <pubDate>Mon, 12 Oct 2020 17:50:01 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/sterilisation/</guid>
      <description>&lt;p&gt;&lt;em&gt;Before copying evidence or making a disk image, one needs to sterilise the target media to ensure that data on that disk before this operation would not meddle with the evidence data. Several rounds of writing &lt;code&gt;0&lt;/code&gt;s are usually enough.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>üìö MacOS Basics</title>
      <link>https://bakerst221b.com/docs/todo/old/defences/macos-fundamentals/</link>
      <pubDate>Mon, 28 Sep 2020 13:21:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/todo/old/defences/macos-fundamentals/</guid>
      <description>Firewall You can set specific rules to limit the traffic.
FileVault No recovery once this password is lost.</description>
    </item>
    
    <item>
      <title>Apple Mach-O</title>
      <link>https://bakerst221b.com/docs/artefacts/files/executables/macho/</link>
      <pubDate>Mon, 28 Sep 2020 13:21:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/files/executables/macho/</guid>
      <description>Binary info otool Using otool we can get general info about the Mach-O file:
otool -h [app_name] &amp;gt; Mach header magic cputype cpusubtype caps filetype ncmds sizeofcmds flags 0xfeedfacf 16777228 0 0x00 2 115 11384 0x00218085 Quick refernce on the meaning:</description>
    </item>
    
    <item>
      <title>Apple Mach-O</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/executables/macho/</link>
      <pubDate>Mon, 28 Sep 2020 13:21:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/executables/macho/</guid>
      <description>Binary info otool Using otool we can get general info about the Mach-O file:
otool -h [app_name] &amp;gt; Mach header magic cputype cpusubtype caps filetype ncmds sizeofcmds flags 0xfeedfacf 16777228 0 0x00 2 115 11384 0x00218085 Quick refernce on the meaning:</description>
    </item>
    
    <item>
      <title>MacOS Core Processes</title>
      <link>https://bakerst221b.com/docs/artefacts/apple/core/mac-core/</link>
      <pubDate>Sun, 29 Nov 2020 16:33:02 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/apple/core/mac-core/</guid>
      <description>&lt;p&gt;&lt;em&gt;There are two broad categories of core processes. Processes that initialize system environment and those that initialize the user environment. Whatever is the category, you need to know them well in order to detect abnormal things.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Apple Platform Security</title>
      <link>https://bakerst221b.com/docs/artefacts/apple/apple-security/</link>
      <pubDate>Thu, 17 Sep 2020 12:18:10 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/apple/apple-security/</guid>
      <description>&lt;p&gt;&lt;em&gt;Applications or even OS itself doesn&amp;rsquo;t know the keys that are protected by Secure Enclave. OS only sees Keychain, but the Security Enclave is separated. It&amp;rsquo;s asked to decrypt the information and it does just that returning the decrypted information.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;hardware&#34;&gt;Hardware&lt;/h2&gt;
&lt;p&gt;Imagine that there lives a vicious criminal ü¶π who&amp;rsquo;s stealing and deleting puppy photos from a preschool server. It&amp;rsquo;s a nasty bussiness that can get him in jail if he&amp;rsquo;s not cautious. He likes to keep everything on the mobile phone he has with him all the time even in the bathroom üöΩ and while taking a shower üöø (he&amp;rsquo;s very careful). He considers the photos to be completely safe since he has set up a PIN for the device only he knows. All his secrets and stuff that can potentially throw him into jail are all on this little piece of harware.&lt;/p&gt;
&lt;p&gt;But suddenly some other guy rats üêÄ him out (because he is sure that&amp;rsquo;s beneath his dignity to do such a damage for little kids) and serious and righteous people in suits are comming to your home with a warrant üìÑ. Well, this criminal ü¶π‚Äç‚ôÄÔ∏è  still thinks: &amp;ldquo;&lt;em&gt;Hey, suckers, I&amp;rsquo;ve got everything on my mobile phone which is secure as hell. All other devices are completely wiped.&lt;/em&gt;&amp;rdquo;. How wrong would this assumption be? What if he had an old Android device? Or may be a iPhone 5S? Or iPhone 4? Is there really a difference? What if the only reasonable assumption in this case would be for him to pack ciggies üö¨  for the jail?&lt;/p&gt;
&lt;p&gt;One of the main things to think about when answering the question: is the mobile phone&amp;rsquo;s NAND or NOR (i.e. non-volatile storage) encrypted? If it&amp;rsquo;s not, then, my dear fellow, he is in trouble. One could just extract this precious little chip and insert it into another device. Now they don&amp;rsquo;t need &lt;em&gt;his&lt;/em&gt; passcode, they&amp;rsquo;d only require theirs or even none at all.&lt;/p&gt;
&lt;p&gt;Alright, say, he was not complete dump and was smart enough to get himself a deviceüì±that uses fulldisk encryption. Is this attack still feseable? Well, depends on where the key üîë is stored. If it&amp;rsquo;s, for example, stored at &lt;code&gt;0x0000000&lt;/code&gt; address of this NAND, then it&amp;rsquo;s just the question of extracting this chip, reading üìñ the first bytes and decrypting the contents. So, how and where to store this key in order to make this &lt;em&gt;at least&lt;/em&gt; harder?&lt;/p&gt;
&lt;p&gt;This is what Apple has been doing for a while. It got so overwhelmed with this task that it happened to end up protecting its endusers even from themselves.&lt;/p&gt;
&lt;p&gt;Back then mobile devices had several basic parts: CPU, some storage chip (NAND or NOR) and some other pieces used to make it possible to use this for talking and SMS-ing. Apple has decided to apply the least-privilege policy here again and restrict the enduser to only those tasks he or she can possibly want to do. It&amp;rsquo;s a phone afterall. Why modifying OS? You don&amp;rsquo;t need it. Make you calls and be happy.&lt;/p&gt;
&lt;p&gt;Modern Apple iDevices have two AES engines: one is for Secure Enclave only, another one is used both for SE and Application Processor.&lt;/p&gt;
&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;p&gt;When the device is manufactured, a 256-bit AES key is written to Secure Enclave. Before some veresions of Apple devices these UIDs were randomly generated and them fused to the chip. However at the moment they are generated by SE during manufacturing and fused using special software. There is no API (neither software, nor hardware) that is able to get it from there, used only by the processor‚Äôs hardware AES engine. This UID key is unique for each device.&lt;/p&gt;
&lt;p&gt;Also, when user creates a passcode, it is turned into a cryptographic key and strengthened with the device‚Äôs UID.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PBKDF2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_pass_derived_crypto_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;device_uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;aes_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;device_uid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pseudorandom_func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;aes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;aes_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_pass_derived_crypto_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user_passcode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;device_uid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;123456...0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;user_pass_derived_crypto_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;crypto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_passcode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;se_mem_key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PBKDF2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_pass_derived_crypto_key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;device_uid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;se_mem_key&lt;/code&gt; encrypts Secure Enclave&amp;rsquo;s memory space.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In iOS and iPadOS, files are encrypted with a key entangled with the Secure Enclave‚Äôs UID and an anti-replay nonce as they are written to the data volume. On A9 (and newer) SoCs, the anti-replay nonce uses entropy generated by the hardware random number generator. The anti-replay nonce support is rooted in a dedicated nonvolatile memory &lt;a href=&#34;https://support.apple.com/guide/security/aside/sec3256b5f8c/1/web/1&#34;&gt;integrated circuit (IC)&lt;/a&gt;. In Mac computers with the Apple T2 Security Chip, the FileVault key hierarchy is similarly linked to the UID of the Secure Enclave. In devices with A12 (and newer) and S4 SoCs, the Secure Enclave is paired with a secure storage IC for anti-replay nonce storage. The secure storage IC is designed with immutable ROM code, a hardware random number generator, cryptography engines, and physical tamper detection. To read and update nonces, the Secure Enclave and storage IC employ a secure protocol that ensures exclusive access to the nonces.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://support.apple.com/guide/security/dedicated-aes-engine-sec4ea70a303/1/web/1&#34;&gt;https://support.apple.com/guide/security/dedicated-aes-engine-sec4ea70a303/1/web/1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All this resembles the sad story of a businessman from &lt;em&gt;Eine Woche volle Samstage (1973)&lt;/em&gt; by Paul Maar, when a man was so afraid üò± of thieves ü¶π‚Äç‚ôÄÔ∏è that he hid the office key üîë in a sock üß¶, the sock - in a boot ü•æ, the boot in a wardrobe locked with a key, the key to the wardrobe hid in his table&amp;rsquo;s drawer, and the key from the last had lost and by doing so arranged an unscheduled day-off for his employees. So is with the encryption on iOS devices:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;device_encr_scheme.png&#34; alt=&#34;device_encr_scheme&#34;&gt;&lt;/p&gt;
&lt;p&gt;File contents&amp;rsquo;s is encrypted with its key, which is stored in the metadata. File key is wrapped with a class key. The metadata, where this encrypted key is stored, is then encrypted by the file system key. All of it is finally protected by an alianz of the user&amp;rsquo;s passcode key and a hardware key (UID). Wow. Let&amp;rsquo;s dive a bit deeper, cause it all seems to be too messed up and confusing.&lt;/p&gt;
&lt;p&gt;User passcode if fed to RNG. It&amp;rsquo;s also to entangled with UID.&lt;/p&gt;
&lt;h2 id=&#34;class-keys&#34;&gt;Class keys&lt;/h2&gt;
&lt;p&gt;Class key represent protection classes. Each one except of &lt;strong&gt;NSFileProtectionNone&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;are protected with the alianz of hardware key and user passcode key:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Complete Protection (NSFileProtectionComplete)&lt;/strong&gt; Data is inaccessible until the user unlocks the device.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protected Unless Open (NSFileProtectionCompleteUnlessOpen)&lt;/strong&gt;: Data is accessible after the user unlocks the device.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Protected Until First User Authentication (NSFileProtectionCompleteUntilFirstUserAuthentication)&lt;/strong&gt;: The file can be accessed as soon as the user unlocks the device for the first time after booting. It can be accessed even if the user subsequently locks the device and the class key is not removed from memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Protection (NSFileProtectionNone)&lt;/strong&gt;: Protected with the UID only. The class key is stored in &amp;ldquo;Effaceable Storage&amp;rdquo;, which is a region of flash memory on the iOS device that allows the storage of small amounts of data. Used for remote wiping.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;About Secure Enclave:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=7UNeUT_sRos&#34;&gt;https://www.youtube.com/watch?v=7UNeUT_sRos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://support.apple.com/guide/security/welcome/web&#34;&gt;https://support.apple.com/guide/security/welcome/web&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The main idea behind the scenes is that applications or even OS itself doesn&amp;rsquo;t know the keys. OS only sees Keychain, but the Security Enclave is separated. It&amp;rsquo;s asked to decrypt the information and it does just that returning the decrypted information.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;T2 vs T1&lt;/li&gt;
&lt;li&gt;Security Enclave - coprocessor with a Keymanager&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Devices which have the SE:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iPhone 5s (or later)&lt;/li&gt;
&lt;li&gt;iPad Air (or later)&lt;/li&gt;
&lt;li&gt;Mac computers that contain the T1 chip or the Apple T2 Security Chip&lt;/li&gt;
&lt;li&gt;Apple TV 4th generation (or later)&lt;/li&gt;
&lt;li&gt;Apple Watch Series 1 (or later)&lt;/li&gt;
&lt;li&gt;HomePod&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s observe this scheme from Apple website&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;SEP_scheme_Apple.png&#34; alt=&#34;SEP_scheme_Apple&#34;&gt;&lt;/p&gt;
&lt;p&gt;Secure Enclave and Application Processor (the main CPU) have separate boot processes and even separate starting code (BootROM) and separate OS. SE has its own light-weight OS (based on L4-family microkernel). And even update process is isolated. With each boot an ephemeral memory protection key is created.&lt;/p&gt;
&lt;h2 id=&#34;boot-process&#34;&gt;Boot process:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Boot ROM (&lt;strong&gt;R&lt;/strong&gt;ead &lt;strong&gt;O&lt;/strong&gt;nly &lt;strong&gt;M&lt;/strong&gt;emory) is executed like the Big Bang, out of nowhere. It&amp;rsquo;s called read-only because it can not be changes and therefore is hardware root of trust. It&amp;rsquo;s implicitly trusted. So they say, you know, if you can&amp;rsquo;t trust Boot ROM, whom can you trust then? Than would be a crazy world. Phew! üòÖ It&amp;rsquo;s such a relief that ROM can be ultimately trusted. It contains the Apple Root CA üîñ public key üîë.&lt;/li&gt;
&lt;li&gt;Boot ROM creates a key
&lt;ol&gt;
&lt;li&gt;User&amp;rsquo;s key + device&amp;rsquo;s UID = ephemeral memory protection key&lt;/li&gt;
&lt;li&gt;Now, ephemeral memory protection key is used to protect Security Enclave&amp;rsquo;s memory.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;filevault&#34;&gt;FileVault&lt;/h2&gt;
&lt;h2 id=&#34;touchid&#34;&gt;TouchID&lt;/h2&gt;
&lt;p&gt;2012 - AuthenTec?&lt;/p&gt;
&lt;p&gt;Tied at the hardware level to A chip. &lt;code&gt;LAContext&lt;/code&gt; and User Presence/ACLs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;touchIdIsSet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;checkcredentials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//authenticated&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript/&#34;&gt;http://highaltitudehacks.com/2013/07/25/ios-application-security-part-8-method-swizzling-using-cycript/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;But I don&amp;rsquo;t enter the passcode at the very beginning. Where does SE get it from during the very first steps of its boot?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;low-level-security&#34;&gt;Low Level Security&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;UID&lt;/code&gt; - key that is fused into Application processor. No one know it and can get from the device. Used to encrypt the contents.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GUID&lt;/code&gt; -&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UDID&lt;/code&gt; - device identifier. It can be retrived with iTunes.&lt;/p&gt;
&lt;p&gt;Home button - sapfire crystal for scratch resistance. Capacitive touch for detection.&lt;/p&gt;
&lt;h2 id=&#34;application-sandbox&#34;&gt;Application Sandbox&lt;/h2&gt;
&lt;p&gt;There are two users on iOS: &lt;code&gt;mobile&lt;/code&gt; and &lt;code&gt;root&lt;/code&gt;. When the device is not jailbroken, all applications and processes run by user are in &lt;code&gt;mobile&lt;/code&gt;&amp;rsquo;s context. Each application is sandboxed and certain policies are implemented (they are called &lt;em&gt;profiles&lt;/em&gt; in iOS). Hence, an application can&amp;rsquo;t access other apps&amp;rsquo; protected resources. This system is called &lt;em&gt;TrustedBSD Mandatory Access Control (MAC) Framework&lt;/em&gt;.  To access other apps&amp;rsquo; resources, entitlements are specified for each application and checked by &lt;code&gt;securityd&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;entitlements&#34;&gt;Entitlements&lt;/h2&gt;
&lt;p&gt;Consider some Russian üá∑üá∫ üë© woman willing to travel to Japan üáØüáµ, EU üá™üá∫ and USA üá∫üá∏.  Since October Revolution in 1917 and WWI it&amp;rsquo;s no longer possible to do it so simply as that. For travelling one needs a visa üé´, and usually each for each country one&amp;rsquo;s planning to attend.&lt;/p&gt;
&lt;p&gt;So, this Russian woman has two visas yet: Shengen and US, but has not aquired Japanese visa. On passport control üõÇ (&lt;code&gt;securityd&lt;/code&gt;) these visas in her passport are checked and corresponding gates are opened if the visa is present. If not, the access to the country&amp;rsquo;s gate is restricted üö´. Since she doesn&amp;rsquo;t have a Japanese visa, she is not &lt;em&gt;entitled&lt;/em&gt; to travel to Japan. Since she has EU and US visas, she can travel there freely. There are, of course, dozens of other people, who can have EU or US visa, so she&amp;rsquo;s not the only one entitled to get there. Basically, they are all in the same &lt;em&gt;entitlement group&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The same is here: each application has &amp;ldquo;passport&amp;rdquo; üîñ with entitlements (an array of strings), based on which an access is denied üö´ or allowed ‚úÖ by üõÇ &lt;code&gt;securityd&lt;/code&gt; (passport control).&lt;/p&gt;
&lt;p&gt;All entitlements are added before or during signing the application, hence they cannot be changed.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Apple is very well known for its value of security and the advanced security mechanisms. I personally found it hard sometimes to understand specific technical controls. This is why I am writing this little article. Smartphones are known to be more secure than desktops for they are also more MOBILE and tend to get lost a lot. That&amp;rsquo;s why MacBooks tend to get closer and closer to smartphones in terms of security.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>macOS Spotlight</title>
      <link>https://bakerst221b.com/docs/todo/cases/ctf-walkthrough/mac-spotlight/</link>
      <pubDate>Thu, 28 Jul 2022 15:14:39 +1000</pubDate>
      
      <guid>https://bakerst221b.com/docs/todo/cases/ctf-walkthrough/mac-spotlight/</guid>
      <description>&lt;p&gt;&lt;em&gt;This writeup is about CyberDefenders macOS Spotlight challenge.&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Once There Lived Admin</title>
      <link>https://bakerst221b.com/docs/blog/2022/02/once-there-lived-admin/</link>
      <pubDate>Sat, 05 Feb 2022 11:42:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2022/02/once-there-lived-admin/</guid>
      <description>Hey, ps! Would like you to hear a fairy tale? I am sure that you do!</description>
    </item>
    
    <item>
      <title>How I Got Started With ARM</title>
      <link>https://bakerst221b.com/docs/blog/2021/03/how-i-got-started-with-arm/</link>
      <pubDate>Sun, 07 Mar 2021 11:42:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2021/03/how-i-got-started-with-arm/</guid>
      <description>üìÜ Friday, 12th of March, 202
‚è∞ 09:00
‚òÄÔ∏è It was a very deceptively sunny morning, children laughing and squeaking merrily.</description>
    </item>
    
    <item>
      <title>How I Got Started With AWS</title>
      <link>https://bakerst221b.com/docs/blog/2021/03/how-i-got-started-with-aws/</link>
      <pubDate>Sun, 07 Mar 2021 11:42:21 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2021/03/how-i-got-started-with-aws/</guid>
      <description>In this blog post I am exploring AWS services (EC2). I am currently using a Free Tier license and I am trying to learn how to use.</description>
    </item>
    
    <item>
      <title>How I Have Built My Lab</title>
      <link>https://bakerst221b.com/docs/blog/2021/03/how-i-have-built-my-lab/</link>
      <pubDate>Mon, 01 Mar 2021 22:14:08 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2021/03/how-i-have-built-my-lab/</guid>
      <description>One late evening when my eyes were so difficult to keep open, I&amp;rsquo;ve decided to setup a Windows Lab on my M1 Mac.</description>
    </item>
    
    <item>
      <title>APFS</title>
      <link>https://bakerst221b.com/docs/artefacts/fs/apfs/</link>
      <pubDate>Sun, 18 Oct 2020 22:35:40 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/fs/apfs/</guid>
      <description>APFS APM and APFS seem to be unable to live together. APFS requires GUID. I have come to that conclusion when I tried formating the drive with a APM and then APFS with DiskUtility.</description>
    </item>
    
    <item>
      <title>ExtX</title>
      <link>https://bakerst221b.com/docs/artefacts/fs/extx/</link>
      <pubDate>Sun, 18 Oct 2020 22:35:40 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/fs/extx/</guid>
      <description>2 No journaling
3 Same but + journaling
4 New FS</description>
    </item>
    
    <item>
      <title>FAT</title>
      <link>https://bakerst221b.com/docs/artefacts/fs/fat/</link>
      <pubDate>Sun, 18 Oct 2020 22:35:40 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/fs/fat/</guid>
      <description>Any FAT partition has two main parts: system area and data area. System area contains FAT boot record (every file system has a boot record), 1st FAT and 2nd FAT.</description>
    </item>
    
    <item>
      <title>HFS and HFS&#43;</title>
      <link>https://bakerst221b.com/docs/artefacts/fs/hfs/</link>
      <pubDate>Sun, 18 Oct 2020 22:35:40 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/fs/hfs/</guid>
      <description>HFS HFS+ Since 1998, since macOS 8.1. Was replaced by APFS.
Didn&amp;rsquo;t natively support full disk encryption (FV2 was added later).</description>
    </item>
    
    <item>
      <title>üß∞ Mac Setup Script</title>
      <link>https://bakerst221b.com/docs/tools/mac-setup-script/</link>
      <pubDate>Wed, 30 Sep 2020 18:33:56 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/tools/mac-setup-script/</guid>
      <description>üóí TODO: Create a repo for this script!
# oh my zsh bash themes sh -c &amp;#34;$(curl -fsSL https://raw.</description>
    </item>
    
    <item>
      <title>Calling ü§ô Conventions in x86</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-calling-conventions/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-calling-conventions/</guid>
      <description>In this article I&amp;rsquo;m giving an overview of different calling conventions with examples.
Intro Consider the following code snippet:</description>
    </item>
    
    <item>
      <title>Flags</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-flags/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-flags/</guid>
      <description>CF Its full name is carry flag. Its main purpose is to tell that the resulting number after some operations is too much to bear for the registry size.</description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-operations/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-operations/</guid>
      <description>In this article I&amp;rsquo;m describing all assembly operations that I&amp;rsquo;ve encountered myseld and also wasn&amp;rsquo;t lazy anough to put down an explanation about here.</description>
    </item>
    
    <item>
      <title>Registers</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-registers/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-registers/</guid>
      <description>EAX EIP EBP RSI/ESI Source Index.
RSI - 64 bit, ESI - 32.
RDI/EDI Destination Index.</description>
    </item>
    
    <item>
      <title>Assembly Cheatsheet</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-cheatsheet/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:54 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-cheatsheet/</guid>
      <description>Lorem markdownum aequalis strigis. Saetigeri iubeas, vultu huic alvum nondum de obside ut laniavit arbor palmis, cum quin.</description>
    </item>
    
    <item>
      <title>ARM Assembly</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-arm/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:23 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-arm/</guid>
      <description>In this article I&amp;rsquo;m giving a quick dive-in into assembly. It&amp;rsquo;s very simple and very difficult at the same time.</description>
    </item>
    
    <item>
      <title>Assembly Intro</title>
      <link>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-intro/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:23 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/ttp/malware/analyse/basics/assebly/assembly-intro/</guid>
      <description>In this article I&amp;rsquo;m giving a quick dive-in into assembly. It&amp;rsquo;s very simple and very difficult at the same time.</description>
    </item>
    
    <item>
      <title>How I Met Radare2</title>
      <link>https://bakerst221b.com/docs/blog/2020/09/how-i-met-radare2/</link>
      <pubDate>Thu, 24 Sep 2020 10:40:07 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2020/09/how-i-met-radare2/</guid>
      <description>üìÜ 24/09/2020, Wednesday
üï∞ 7:00 What a nice morning! And it&amp;rsquo;s so great to be woken up by a high-pitched cry in the ear&amp;hellip; Well, after giving my daughter her breakfast and doing all the neccessary hygine procedures for us both, I left her by my side on the development carpet, so that I could develop myself&amp;hellip;</description>
    </item>
    
    <item>
      <title>üìò macOS BTFM</title>
      <link>https://bakerst221b.com/docs/tools/field-manuals/mac-btfm/</link>
      <pubDate>Wed, 23 Sep 2020 10:26:29 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/tools/field-manuals/mac-btfm/</guid>
      <description>python FSEParser_V3.3.py -s -t folder /.fseventsd -o /Users/sentinel/Desktop/FSEvents_Out References </description>
    </item>
    
    <item>
      <title>üß∞ Mobile Toolkit</title>
      <link>https://bakerst221b.com/docs/attacks/applications/mobile/mobile-toolkit/</link>
      <pubDate>Wed, 23 Sep 2020 10:26:29 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/attacks/applications/mobile/mobile-toolkit/</guid>
      <description>Debuggers gdb radare2 Other IDA Pro [Hopper Disassembler](/docs/toolkit/general/reverse-toolkit/#hopper disassembler) Static code analysis IDA Pro Hopper Disassembler radare2 Utilities Activity Analysis Jailbreaking/Rooting Something Desciption</description>
    </item>
    
    <item>
      <title>iOS Keychain</title>
      <link>https://bakerst221b.com/docs/artefacts/apple/keychain/</link>
      <pubDate>Fri, 02 Oct 2020 11:38:32 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/artefacts/apple/keychain/</guid>
      <description>In this article I&amp;rsquo;m trying to study how keychain works.
Metaphor There once lived a monkey üêí George.</description>
    </item>
    
    <item>
      <title>How I Met Hugo</title>
      <link>https://bakerst221b.com/docs/blog/2020/09/how-i-met-hugo/</link>
      <pubDate>Wed, 09 Sep 2020 13:45:07 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/blog/2020/09/how-i-met-hugo/</guid>
      <description>There was a time when I was desperately trying to become a web programmer (those wonderful days of na√Øve curiosityü§¶‚Äç‚ôÄÔ∏è).</description>
    </item>
    
  </channel>
</rss>
