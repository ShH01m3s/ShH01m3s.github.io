<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on Analyst</title>
    <link>https://bakerst221b.com/platforms/linux/</link>
    <description>Recent content in linux on Analyst</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Oct 2020 22:33:25 +0300</lastBuildDate><atom:link href="https://bakerst221b.com/platforms/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Positive and Negative Numbers</title>
      <link>https://bakerst221b.com/docs/reversing/basics/positive-and-negative-numbers/</link>
      <pubDate>Sun, 18 Oct 2020 22:33:25 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/positive-and-negative-numbers/</guid>
      <description>Intro One&amp;rsquo;s complement Two complement </description>
    </item>
    
    <item>
      <title>BTFM</title>
      <link>https://bakerst221b.com/docs/toolkit/manuals/net-btfm/</link>
      <pubDate>Mon, 28 Sep 2020 12:21:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/toolkit/manuals/net-btfm/</guid>
      <description>dshell # MacOSX path to directory with pyenv (example): /Users/[user_name]/.pyenv/versions/3.8.5/envs/python3/lib/python3.8/site-packages/dshell/ decode -l # list decoders decode -d [decoder_name] # decoder info # who talked to whom decode -d ip [capture_file_name].</description>
    </item>
    
    <item>
      <title>Calling ðŸ¤™ Conventions in x86</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-calling-conventions/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-calling-conventions/</guid>
      <description>In this article I&amp;rsquo;m giving an overview of different calling conventions with examples.
Intro Consider the following code snippet:</description>
    </item>
    
    <item>
      <title>Dynamic Analysis</title>
      <link>https://bakerst221b.com/docs/reversing/dynamic/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/dynamic/</guid>
      <description>This is more about cracking.
Cracking lab presents&amp;hellip;. . Staring: ðŸŒŸ
Tools ðŸ§°: OllyDbg as a debugger, Import Reconstructors as an &amp;hellip; wait for it &amp;hellip;.</description>
    </item>
    
    <item>
      <title>Flags</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-flags/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-flags/</guid>
      <description>CF ZF OF </description>
    </item>
    
    <item>
      <title>Operations</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-operations/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-operations/</guid>
      <description>In this article I&amp;rsquo;m describing all assembly operations that I&amp;rsquo;ve encountered myseld and also wasn&amp;rsquo;t lazy anough to put down an explanation about here.</description>
    </item>
    
    <item>
      <title>Registers</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-registers/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-registers/</guid>
      <description>EAX EIP EBP RSI/ESI Source Index.
RSI - 64 bit, ESI - 32.
RDI/EDI Destination Index.</description>
    </item>
    
    <item>
      <title>Static Analysis</title>
      <link>https://bakerst221b.com/docs/reversing/static/</link>
      <pubDate>Sun, 27 Sep 2020 16:31:05 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/static/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Crackme Algorithm</title>
      <link>https://bakerst221b.com/docs/reversing/crack-me-algo/</link>
      <pubDate>Thu, 24 Sep 2020 17:46:43 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/crack-me-algo/</guid>
      <description>Look at the strings fs strings and f in radare2 or rabin -zz Find xrefs for the strings of interest axt @ str.</description>
    </item>
    
    <item>
      <title>From Src to Binary</title>
      <link>https://bakerst221b.com/docs/reversing/basics/from-src-to-binary/</link>
      <pubDate>Thu, 24 Sep 2020 17:46:43 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/from-src-to-binary/</guid>
      <description>To read
https://www.airs.com/blog/archives/38</description>
    </item>
    
    <item>
      <title>Assembly Cheatsheet</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-cheatsheet/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:54 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-cheatsheet/</guid>
      <description>Lorem markdownum aequalis strigis. Saetigeri iubeas, vultu huic alvum nondum de obside ut laniavit arbor palmis, cum quin.</description>
    </item>
    
    <item>
      <title>ARM Assembly</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-arm/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:23 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-arm/</guid>
      <description>In this article I&amp;rsquo;m giving a quick dive-in into assembly. It&amp;rsquo;s very simple and very difficult at the same time.</description>
    </item>
    
    <item>
      <title>Assembly Intro</title>
      <link>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-intro/</link>
      <pubDate>Thu, 24 Sep 2020 11:43:23 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/reversing/basics/assebly/assembly-intro/</guid>
      <description>In this article I&amp;rsquo;m giving a quick dive-in into assembly. It&amp;rsquo;s very simple and very difficult at the same time.</description>
    </item>
    
    <item>
      <title>Mobile Toolkit</title>
      <link>https://bakerst221b.com/docs/toolkit/toolsdb/mobile-toolkit/</link>
      <pubDate>Wed, 23 Sep 2020 10:26:29 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/toolkit/toolsdb/mobile-toolkit/</guid>
      <description>Debuggers gdb radare2 Other  IDA Pro [Hopper Disassembler](/docs/toolkit/general/reverse-toolkit/#hopper disassembler)  Static code analysis IDA Pro Hopper Disassembler radare2 Utilities Activity Analysis Jailbreaking/Rooting Something Desciption</description>
    </item>
    
    <item>
      <title>Dead Acquisition Steps</title>
      <link>https://bakerst221b.com/docs/dfir/acquisition/dead-acquisition/</link>
      <pubDate>Sun, 20 Sep 2020 11:04:28 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/dfir/acquisition/dead-acquisition/</guid>
      <description>Logical Backup - doesn&amp;rsquo;t copy all, doesn&amp;rsquo;t copy slack, free space and deleted files. Imaging - bit-by-bit copy.</description>
    </item>
    
    <item>
      <title>Live Acquisition Steps</title>
      <link>https://bakerst221b.com/docs/dfir/acquisition/live-acquisition/</link>
      <pubDate>Sun, 20 Sep 2020 11:04:28 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/dfir/acquisition/live-acquisition/</guid>
      <description>Logical Backup - doesn&amp;rsquo;t copy all, doesn&amp;rsquo;t copy slack, free space and deleted files. Imaging - bit-by-bit copy.</description>
    </item>
    
    <item>
      <title>Linux OS Primer</title>
      <link>https://bakerst221b.com/docs/dfir/host-analysis/linux/linux-overview/</link>
      <pubDate>Mon, 08 Jun 2020 09:49:24 +0300</pubDate>
      
      <guid>https://bakerst221b.com/docs/dfir/host-analysis/linux/linux-overview/</guid>
      <description>System Boot Init is the process that spawns other processes and usually has pid 1. /etc/inittab can be used to set run level for the systems.</description>
    </item>
    
  </channel>
</rss>
